/* Written By Akash Atri
All tables are picked from wikipedia
*/
#include "stdafx.h"
#include<stdint.h>
#include<iostream>
#include<fstream>
#include<sstream>
#include <string>
#include<cstring>
using namespace std;
#define AES_BYTE 16 
#define ROUNDS 10


unsigned char s_box[256] =
{
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};


unsigned char inv_s[256] =
{
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

unsigned char mul2[] = {

	0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
	0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
	0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
	0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
	0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
	0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
	0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
	0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
	0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
	0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
	0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
	0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
	0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
	0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
	0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
	0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

unsigned char mul3[] =
{
	0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
	0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
	0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
	0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
	0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
	0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
	0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
	0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
	0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
	0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
	0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
	0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
	0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
	0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
	0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
	0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

unsigned char mul9[] = {
	0X00,0X09,0X12,0X1B,0X24,0X2D,0X36,0X3F,0X48,0X41,0X5A,0X53,0X6C,0X65,0X7E,0X77,
	0X90,0X99,0X82,0X8B,0XB4,0XBD,0XA6,0XAF,0XD8,0XD1,0XCA,0XC3,0XFC,0XF5,0XEE,0XE7,
	0X3B,0X32,0X29,0X20,0X1F,0X16,0X0D,0X04,0X73,0X7A,0X61,0X68,0X57,0X5E,0X45,0X4C,
	0XAB,0XA2,0XB9,0XB0,0X8F,0X86,0X9D,0X94,0XE3,0XEA,0XF1,0XF8,0XC7,0XCE,0XD5,0XDC,
	0X76,0X7F,0X64,0X6D,0X52,0X5B,0X40,0X49,0X3E,0X37,0X2C,0X25,0X1A,0X13,0X08,0X01,
	0XE6,0XEF,0XF4,0XFD,0XC2,0XCB,0XD0,0XD9,0XAE,0XA7,0XBC,0XB5,0X8A,0X83,0X98,0X91,
	0X4D,0X44,0X5F,0X56,0X69,0X60,0X7B,0X72,0X05,0X0C,0X17,0X1E,0X21,0X28,0X33,0X3A,
	0XDD,0XD4,0XCF,0XC6,0XF9,0XF0,0XEB,0XE2,0X95,0X9C,0X87,0X8E,0XB1,0XB8,0XA3,0XAA,
	0XEC,0XE5,0XFE,0XF7,0XC8,0XC1,0XDA,0XD3,0XA4,0XAD,0XB6,0XBF,0X80,0X89,0X92,0X9B,
	0X7C,0X75,0X6E,0X67,0X58,0X51,0X4A,0X43,0X34,0X3D,0X26,0X2F,0X10,0X19,0X02,0X0B,
	0XD7,0XDE,0XC5,0XCC,0XF3,0XFA,0XE1,0XE8,0X9F,0X96,0X8D,0X84,0XBB,0XB2,0XA9,0XA0,
	0X47,0X4E,0X55,0X5C,0X63,0X6A,0X71,0X78,0X0F,0X06,0X1D,0X14,0X2B,0X22,0X39,0X30,
	0X9A,0X93,0X88,0X81,0XBE,0XB7,0XAC,0XA5,0XD2,0XDB,0XC0,0XC9,0XF6,0XFF,0XE4,0XED,
	0X0A,0X03,0X18,0X11,0X2E,0X27,0X3C,0X35,0X42,0X4B,0X50,0X59,0X66,0X6F,0X74,0X7D,
	0XA1,0XA8,0XB3,0XBA,0X85,0X8C,0X97,0X9E,0XE9,0XE0,0XFB,0XF2,0XCD,0XC4,0XDF,0XD6,
	0X31,0X38,0X23,0X2A,0X15,0X1C,0X07,0X0E,0X79,0X70,0X6B,0X62,0X5D,0X54,0X4F,0X46
};

unsigned char mul11[] = {
	0X00,0X0B,0X16,0X1D,0X2C,0X27,0X3A,0X31,0X58,0X53,0X4E,0X45,0X74,0X7F,0X62,0X69,
	0XB0,0XBB,0XA6,0XAD,0X9C,0X97,0X8A,0X81,0XE8,0XE3,0XFE,0XF5,0XC4,0XCF,0XD2,0XD9,
	0X7B,0X70,0X6D,0X66,0X57,0X5C,0X41,0X4A,0X23,0X28,0X35,0X3E,0X0F,0X04,0X19,0X12,
	0XCB,0XC0,0XDD,0XD6,0XE7,0XEC,0XF1,0XFA,0X93,0X98,0X85,0X8E,0XBF,0XB4,0XA9,0XA2,
	0XF6,0XFD,0XE0,0XEB,0XDA,0XD1,0XCC,0XC7,0XAE,0XA5,0XB8,0XB3,0X82,0X89,0X94,0X9F,
	0X46,0X4D,0X50,0X5B,0X6A,0X61,0X7C,0X77,0X1E,0X15,0X08,0X03,0X32,0X39,0X24,0X2F,
	0X8D,0X86,0X9B,0X90,0XA1,0XAA,0XB7,0XBC,0XD5,0XDE,0XC3,0XC8,0XF9,0XF2,0XEF,0XE4,
	0X3D,0X36,0X2B,0X20,0X11,0X1A,0X07,0X0C,0X65,0X6E,0X73,0X78,0X49,0X42,0X5F,0X54,
	0XF7,0XFC,0XE1,0XEA,0XDB,0XD0,0XCD,0XC6,0XAF,0XA4,0XB9,0XB2,0X83,0X88,0X95,0X9E,
	0X47,0X4C,0X51,0X5A,0X6B,0X60,0X7D,0X76,0X1F,0X14,0X09,0X02,0X33,0X38,0X25,0X2E,
	0X8C,0X87,0X9A,0X91,0XA0,0XAB,0XB6,0XBD,0XD4,0XDF,0XC2,0XC9,0XF8,0XF3,0XEE,0XE5,
	0X3C,0X37,0X2A,0X21,0X10,0X1B,0X06,0X0D,0X64,0X6F,0X72,0X79,0X48,0X43,0X5E,0X55,
	0X01,0X0A,0X17,0X1C,0X2D,0X26,0X3B,0X30,0X59,0X52,0X4F,0X44,0X75,0X7E,0X63,0X68,
	0XB1,0XBA,0XA7,0XAC,0X9D,0X96,0X8B,0X80,0XE9,0XE2,0XFF,0XF4,0XC5,0XCE,0XD3,0XD8,
	0X7A,0X71,0X6C,0X67,0X56,0X5D,0X40,0X4B,0X22,0X29,0X34,0X3F,0X0E,0X05,0X18,0X13,
	0XCA,0XC1,0XDC,0XD7,0XE6,0XED,0XF0,0XFB,0X92,0X99,0X84,0X8F,0XBE,0XB5,0XA8,0XA3
};

unsigned char mul13[] = {
	0X00,0X0D,0X1A,0X17,0X34,0X39,0X2E,0X23,0X68,0X65,0X72,0X7F,0X5C,0X51,0X46,0X4B,
	0XD0,0XDD,0XCA,0XC7,0XE4,0XE9,0XFE,0XF3,0XB8,0XB5,0XA2,0XAF,0X8C,0X81,0X96,0X9B,
	0XBB,0XB6,0XA1,0XAC,0X8F,0X82,0X95,0X98,0XD3,0XDE,0XC9,0XC4,0XE7,0XEA,0XFD,0XF0,
	0X6B,0X66,0X71,0X7C,0X5F,0X52,0X45,0X48,0X03,0X0E,0X19,0X14,0X37,0X3A,0X2D,0X20,
	0X6D,0X60,0X77,0X7A,0X59,0X54,0X43,0X4E,0X05,0X08,0X1F,0X12,0X31,0X3C,0X2B,0X26,
	0XBD,0XB0,0XA7,0XAA,0X89,0X84,0X93,0X9E,0XD5,0XD8,0XCF,0XC2,0XE1,0XEC,0XFB,0XF6,
	0XD6,0XDB,0XCC,0XC1,0XE2,0XEF,0XF8,0XF5,0XBE,0XB3,0XA4,0XA9,0X8A,0X87,0X90,0X9D,
	0X06,0X0B,0X1C,0X11,0X32,0X3F,0X28,0X25,0X6E,0X63,0X74,0X79,0X5A,0X57,0X40,0X4D,
	0XDA,0XD7,0XC0,0XCD,0XEE,0XE3,0XF4,0XF9,0XB2,0XBF,0XA8,0XA5,0X86,0X8B,0X9C,0X91,
	0X0A,0X07,0X10,0X1D,0X3E,0X33,0X24,0X29,0X62,0X6F,0X78,0X75,0X56,0X5B,0X4C,0X41,
	0X61,0X6C,0X7B,0X76,0X55,0X58,0X4F,0X42,0X09,0X04,0X13,0X1E,0X3D,0X30,0X27,0X2A,
	0XB1,0XBC,0XAB,0XA6,0X85,0X88,0X9F,0X92,0XD9,0XD4,0XC3,0XCE,0XED,0XE0,0XF7,0XFA,
	0XB7,0XBA,0XAD,0XA0,0X83,0X8E,0X99,0X94,0XDF,0XD2,0XC5,0XC8,0XEB,0XE6,0XF1,0XFC,
	0X67,0X6A,0X7D,0X70,0X53,0X5E,0X49,0X44,0X0F,0X02,0X15,0X18,0X3B,0X36,0X21,0X2C,
	0X0C,0X01,0X16,0X1B,0X38,0X35,0X22,0X2F,0X64,0X69,0X7E,0X73,0X50,0X5D,0X4A,0X47,
	0XDC,0XD1,0XC6,0XCB,0XE8,0XE5,0XF2,0XFF,0XB4,0XB9,0XAE,0XA3,0X80,0X8D,0X9A,0X97
};

unsigned char mul14[] = {
	0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
	0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
	0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
	0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
	0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
	0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
	0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
	0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
	0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
	0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
	0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
	0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
	0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
	0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
	0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
	0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

unsigned char rcon[256] = {
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};


void KeyExpansion(unsigned char* input, unsigned char* expandedKeys) {

	for (int i = 0; i < AES_BYTE; i++) {
		expandedKeys[i] = input[i];
	}

	int bytesGen = AES_BYTE;
	int rcon_location = 1;
	unsigned char key[4];


	while (bytesGen < (AES_BYTE * (ROUNDS + 1))) {
		for (int i = 0; i < ((AES_BYTE * 8) / 32); i++) { //while is less than the number of 32 bit words in 176 bit expanded keys
			key[i] = expandedKeys[i + bytesGen - ((AES_BYTE * 8) / 32)];
		}
		if (bytesGen % AES_BYTE == 0) {

			unsigned char temp = key[0];
			key[0] = key[1];
			key[1] = key[2];
			key[2] = key[3];
			key[3] = temp;

			key[0] = s_box[key[0]];
			key[1] = s_box[key[1]];
			key[2] = s_box[key[2]];
			key[3] = s_box[key[3]];

			key[0] ^= rcon[rcon_location];
			rcon_location++;

		}

		for (int i = 0; i < 4; i++) {
			expandedKeys[bytesGen] = expandedKeys[bytesGen - AES_BYTE] ^ key[i];
			bytesGen++;
		}
	}
}


void AddRoundKey(unsigned char * plain_text, unsigned char * roundKey)
{
	for (int i = 0; i < AES_BYTE; i++) {
		plain_text[i] = plain_text[i] ^ roundKey[i];
	}
}

void SubBytes(unsigned char * plain_text) {
	for (int i = 0; i < AES_BYTE; i++) {
		plain_text[i] = s_box[plain_text[i]];
	}
}

void ShiftRows(unsigned char * plain_text) {
	unsigned char temp_block[AES_BYTE];

	for (int i = 0; i < AES_BYTE; i += 4) {
		temp_block[i] = plain_text[i];
		temp_block[i + 1] = plain_text[(i + 5) % AES_BYTE];
		temp_block[i + 2] = plain_text[(i + 10) % AES_BYTE];
		temp_block[i + 3] = plain_text[(i + 15) % AES_BYTE];
	}

	for (int i = 0; i < AES_BYTE; i++) {
		plain_text[i] = temp_block[i];
	}
}
void MixColumns(unsigned char* state) {
	

	unsigned char tmp[16];
	
	tmp[0] = (unsigned char)(mul2[state[0]] ^ mul3[state[1]] ^ state[2] ^ state[3]);
	tmp[1] = (unsigned char)(state[0] ^ mul2[state[1]] ^ mul3[state[2]] ^ state[3]);
	tmp[2] = (unsigned char)(state[0] ^ state[1] ^ mul2[state[2]] ^ mul3[state[3]]);
	tmp[3] = (unsigned char)(mul3[state[0]] ^ state[1] ^ state[2] ^ mul2[state[3]]);

	
	tmp[4] = (unsigned char)(mul2[state[4]] ^ mul3[state[5]] ^ state[6] ^ state[7]);
	tmp[5] = (unsigned char)(state[4] ^ mul2[state[5]] ^ mul3[state[6]] ^ state[7]);
	tmp[6] = (unsigned char)(state[4] ^ state[5] ^ mul2[state[6]] ^ mul3[state[7]]);
	tmp[7] = (unsigned char)(mul3[state[4]] ^ state[5] ^ state[6] ^ mul2[state[7]]);

	
	tmp[8] = (unsigned char)(mul2[state[8]] ^ mul3[state[9]] ^ state[10] ^ state[11]);
	tmp[9] = (unsigned char)(state[8] ^ mul2[state[9]] ^ mul3[state[10]] ^ state[11]);
	tmp[10] = (unsigned char)(state[8] ^ state[9] ^ mul2[state[10]] ^ mul3[state[11]]);
	tmp[11] = (unsigned char)(mul3[state[8]] ^ state[9] ^ state[10] ^ mul2[state[11]]);


	tmp[12] = (unsigned char)(mul2[state[12]] ^ mul3[state[13]] ^ state[14] ^ state[15]);
	tmp[13] = (unsigned char)(state[12] ^ mul2[state[13]] ^ mul3[state[14]] ^ state[15]);
	tmp[14] = (unsigned char)(state[12] ^ state[13] ^ mul2[state[14]] ^ mul3[state[15]]);
	tmp[15] = (unsigned char)(mul3[state[12]] ^ state[13] ^ state[14] ^ mul2[state[15]]);

	for (int i = 0; i < 16; i++)
		state[i] = tmp[i];
}


void encryption(unsigned char * plain_text, unsigned char * key) {

	unsigned char expandedKey[AES_BYTE * (ROUNDS + 1)];
	KeyExpansion(key, expandedKey);
	AddRoundKey(plain_text, key);

	for (int i = 0; i < ROUNDS - 1; i++) {
		SubBytes(plain_text);
		ShiftRows(plain_text);
		MixColumns(plain_text);
		AddRoundKey(plain_text, expandedKey + (AES_BYTE * (i + 1)));
	}

	SubBytes(plain_text);
	ShiftRows(plain_text);
	AddRoundKey(plain_text, expandedKey + (AES_BYTE * ROUNDS));
}
void aesEncrypt(unsigned char * plain_text, unsigned char* key, int text_length) {

	for (int i = 0; i < text_length; i += 16) {
		encryption(plain_text + i, key);
	}
}
void ReverseSubBytes(unsigned char * state) {
	for (int i = 0; i < AES_BYTE; i++) {
		state[i] = inv_s[state[i]];
	}
}

void RevShiftRow(unsigned char * plain_text) {
	unsigned char temp[AES_BYTE];

	for (int i = 0; i < AES_BYTE; i += 4) {
		
		temp[i] = plain_text[i];
		temp[(i + 5) % AES_BYTE] = plain_text[i + 1];
		temp[(i + 10) % AES_BYTE] = plain_text[i + 2];
		temp[(i + 15) % AES_BYTE] = plain_text[i + 3];
	}

	for (int i = 0; i < AES_BYTE; i++) {
		plain_text[i] = temp[i];
	}
}


void ReverseMixColumns(unsigned char* state) {
	unsigned char tmp[16];


	tmp[0] = (unsigned char)(mul14[state[0]] ^ mul11[state[1]] ^ mul13[state[2]] ^ mul9[state[3]]);
	tmp[1] = (unsigned char)(mul9[state[0]] ^ mul14[state[1]] ^ mul11[state[2]] ^ mul13[state[3]]);
	tmp[2] = (unsigned char)(mul13[state[0]] ^ mul9[state[1]] ^ mul14[state[2]] ^ mul11[state[3]]);
	tmp[3] = (unsigned char)(mul11[state[0]] ^ mul13[state[1]] ^ mul9[state[2]] ^ mul14[state[3]]);

	
	tmp[4] = (unsigned char)(mul14[state[4]] ^ mul11[state[5]] ^ mul13[state[6]] ^ mul9[state[7]]);
	tmp[5] = (unsigned char)(mul9[state[4]] ^ mul14[state[5]] ^ mul11[state[6]] ^ mul13[state[7]]);
	tmp[6] = (unsigned char)(mul13[state[4]] ^ mul9[state[5]] ^ mul14[state[6]] ^ mul11[state[7]]);
	tmp[7] = (unsigned char)(mul11[state[4]] ^ mul13[state[5]] ^ mul9[state[6]] ^ mul14[state[7]]);

	
	tmp[8] = (unsigned char)(mul14[state[8]] ^ mul11[state[9]] ^ mul13[state[10]] ^ mul9[state[11]]);
	tmp[9] = (unsigned char)(mul9[state[8]] ^ mul14[state[9]] ^ mul11[state[10]] ^ mul13[state[11]]);
	tmp[10] = (unsigned char)(mul13[state[8]] ^ mul9[state[9]] ^ mul14[state[10]] ^ mul11[state[11]]);
	tmp[11] = (unsigned char)(mul11[state[8]] ^ mul13[state[9]] ^ mul9[state[10]] ^ mul14[state[11]]);

	
	tmp[12] = (unsigned char)(mul14[state[12]] ^ mul11[state[13]] ^ mul13[state[14]] ^ mul9[state[15]]);
	tmp[13] = (unsigned char)(mul9[state[12]] ^ mul14[state[13]] ^ mul11[state[14]] ^ mul13[state[15]]);
	tmp[14] = (unsigned char)(mul13[state[12]] ^ mul9[state[13]] ^ mul14[state[14]] ^ mul11[state[15]]);
	tmp[15] = (unsigned char)(mul11[state[12]] ^ mul13[state[13]] ^ mul9[state[14]] ^ mul14[state[15]]);

	for (int i = 0; i < 16; i++)
		state[i] = tmp[i];

}


void decryption(unsigned char * plain_text, unsigned char * key) {

	unsigned char expandedKey[AES_BYTE * (ROUNDS + 1)];

	KeyExpansion(key, expandedKey);

	AddRoundKey(plain_text, expandedKey + (AES_BYTE * ROUNDS));

	RevShiftRow(plain_text);
	ReverseSubBytes(plain_text);

	for (int i = ROUNDS - 1; i >= 1; i--) {
		AddRoundKey(plain_text, expandedKey + (AES_BYTE * i));
		ReverseMixColumns(plain_text);
		RevShiftRow(plain_text);
		ReverseSubBytes(plain_text);
	}
	AddRoundKey(plain_text, expandedKey);
}

void aesDecrypt(unsigned char * plain_text, unsigned char* key, int text_length) {

	for (int i = 0; i < text_length; i += 16) {
		decryption(plain_text + i, key);
	}
}



unsigned char *encryptedString(string input, unsigned char* key){

	string str=input;
	int size = str.length();

	unsigned char *msg = (unsigned char *)malloc(sizeof(unsigned char)*size + 1);

	strcpy((char*)msg, str.c_str());


	//unsigned char message[(AES_BYTE * 2) + 1] = { "This is encrypted message!" };
	//unsigned char key[AES_BYTE + 1]={keyinput};

	//"0123456789ABCDEF"

	printf("With this key: %s\n", key);
	aesEncrypt(msg, key, str.length());

	//storing data in a file
	ofstream outdata; // outdata is like cin
	outdata.open("message.aes"); // opens the file
	   if( !outdata ) { // file couldn't be opened
	      cerr << "Error: file could not be opened" << endl;
	      exit(1);
	   }
	   
	   outdata <<msg<< endl;
	   cout<<"msg saved in message.aes"<<endl;
	   outdata.close();

	//printf("Here is the encrypted result: %s\n", msg);
	return msg;

		//aesDecrypt(msg, key, str.length());
		//printf("Here is the decrypted message: %s\n\n", msg);
}

void decryptedString(string input,unsigned char* enc,unsigned char* key){


	aesDecrypt(enc, key, input.length());
        printf("Here is the decrypted message: %s\n\n", enc);
        
}

int main() {


	
	char* x;
	//scanf("%s",&x);
        cin>>x;
        unsigned char* key = (unsigned char*) x;
        cout<<key;
	string str;
	getline(cin,str);
	cout << "str data of file : " << str << endl;
	
	cout<<"============= encryption=============="<<endl;
	
	cout<<"encrypted msg: "<<encryptedString(str,key)<<endl;	
	
	cout<<"============= decryption=============="<<endl;
	unsigned char* enc =encryptedString(str,key);
	
	decryptedString(str,enc,key);
		
	

	return 0;

}
